# source: https://eu1.prisma.sh/rouregrandpa/rouregrandpadb/rgdb
# timestamp: Mon Mar 09 2020 13:53:59 GMT+0100 (Central European Standard Time)

type AggregateAssociation {
  count: Int!
}

type AggregateCareersModel {
  count: Int!
}

type AggregateCharacteristics {
  count: Int!
}

type AggregateCountriesModel {
  count: Int!
}

type AggregateCouple {
  count: Int!
}

type AggregateEvaluationsGrandpa {
  count: Int!
}

type AggregateEvaluationsStudent {
  count: Int!
}

type AggregateHouse {
  count: Int!
}

type AggregateimagesDocument {
  count: Int!
}

type AggregateimagesUniversity {
  count: Int!
}

type AggregateInterviews {
  count: Int!
}

type AggregateProvince {
  count: Int!
}

type AggregateSourcesModel {
  count: Int!
}

type AggregateTypeUser {
  count: Int!
}

type AggregateUniversitiesModel {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserGrandpa {
  count: Int!
}

type AggregateUserStudent {
  count: Int!
}

type AggregateUserTech {
  count: Int!
}

type Association implements Node {
  id: ID!
  name: String
}

"""A connection to a list of items."""
type AssociationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssociationEdge]!
  aggregate: AggregateAssociation!
}

input AssociationCreateInput {
  id: ID
  name: String
}

input AssociationCreateOneInput {
  create: AssociationCreateInput
  connect: AssociationWhereUniqueInput
}

"""An edge in a connection."""
type AssociationEdge {
  """The item at the end of the edge."""
  node: Association!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AssociationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type AssociationPreviousValues {
  id: ID!
  name: String
}

type AssociationSubscriptionPayload {
  mutation: MutationType!
  node: Association
  updatedFields: [String!]
  previousValues: AssociationPreviousValues
}

input AssociationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AssociationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssociationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssociationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AssociationWhereInput
}

input AssociationUpdateDataInput {
  name: String
}

input AssociationUpdateInput {
  name: String
}

input AssociationUpdateManyMutationInput {
  name: String
}

input AssociationUpdateOneRequiredInput {
  create: AssociationCreateInput
  connect: AssociationWhereUniqueInput
  update: AssociationUpdateDataInput
  upsert: AssociationUpsertNestedInput
}

input AssociationUpsertNestedInput {
  update: AssociationUpdateDataInput!
  create: AssociationCreateInput!
}

input AssociationWhereInput {
  """Logical AND on all given filters."""
  AND: [AssociationWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssociationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssociationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input AssociationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type CareersModel implements Node {
  id: ID!
  carrerName: String!
  university: UniversitiesModel!
}

"""A connection to a list of items."""
type CareersModelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CareersModelEdge]!
  aggregate: AggregateCareersModel!
}

input CareersModelCreateInput {
  id: ID
  carrerName: String!
  university: UniversitiesModelCreateOneInput!
}

input CareersModelCreateOneInput {
  create: CareersModelCreateInput
  connect: CareersModelWhereUniqueInput
}

"""An edge in a connection."""
type CareersModelEdge {
  """The item at the end of the edge."""
  node: CareersModel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CareersModelOrderByInput {
  id_ASC
  id_DESC
  carrerName_ASC
  carrerName_DESC
}

type CareersModelPreviousValues {
  id: ID!
  carrerName: String!
}

type CareersModelSubscriptionPayload {
  mutation: MutationType!
  node: CareersModel
  updatedFields: [String!]
  previousValues: CareersModelPreviousValues
}

input CareersModelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CareersModelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CareersModelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CareersModelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CareersModelWhereInput
}

input CareersModelUpdateDataInput {
  carrerName: String
  university: UniversitiesModelUpdateOneRequiredInput
}

input CareersModelUpdateInput {
  carrerName: String
  university: UniversitiesModelUpdateOneRequiredInput
}

input CareersModelUpdateManyMutationInput {
  carrerName: String
}

input CareersModelUpdateOneInput {
  create: CareersModelCreateInput
  connect: CareersModelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CareersModelUpdateDataInput
  upsert: CareersModelUpsertNestedInput
}

input CareersModelUpsertNestedInput {
  update: CareersModelUpdateDataInput!
  create: CareersModelCreateInput!
}

input CareersModelWhereInput {
  """Logical AND on all given filters."""
  AND: [CareersModelWhereInput!]

  """Logical OR on all given filters."""
  OR: [CareersModelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CareersModelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  carrerName: String

  """All values that are not equal to given value."""
  carrerName_not: String

  """All values that are contained in given list."""
  carrerName_in: [String!]

  """All values that are not contained in given list."""
  carrerName_not_in: [String!]

  """All values less than the given value."""
  carrerName_lt: String

  """All values less than or equal the given value."""
  carrerName_lte: String

  """All values greater than the given value."""
  carrerName_gt: String

  """All values greater than or equal the given value."""
  carrerName_gte: String

  """All values containing the given string."""
  carrerName_contains: String

  """All values not containing the given string."""
  carrerName_not_contains: String

  """All values starting with the given string."""
  carrerName_starts_with: String

  """All values not starting with the given string."""
  carrerName_not_starts_with: String

  """All values ending with the given string."""
  carrerName_ends_with: String

  """All values not ending with the given string."""
  carrerName_not_ends_with: String
  university: UniversitiesModelWhereInput
}

input CareersModelWhereUniqueInput {
  id: ID
}

type Characteristics implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type CharacteristicsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CharacteristicsEdge]!
  aggregate: AggregateCharacteristics!
}

input CharacteristicsCreateInput {
  id: ID
  name: String!
}

input CharacteristicsCreateManyInput {
  create: [CharacteristicsCreateInput!]
  connect: [CharacteristicsWhereUniqueInput!]
}

"""An edge in a connection."""
type CharacteristicsEdge {
  """The item at the end of the edge."""
  node: Characteristics!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CharacteristicsOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CharacteristicsPreviousValues {
  id: ID!
  name: String!
}

input CharacteristicsScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CharacteristicsScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CharacteristicsScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CharacteristicsScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type CharacteristicsSubscriptionPayload {
  mutation: MutationType!
  node: Characteristics
  updatedFields: [String!]
  previousValues: CharacteristicsPreviousValues
}

input CharacteristicsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CharacteristicsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CharacteristicsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CharacteristicsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CharacteristicsWhereInput
}

input CharacteristicsUpdateDataInput {
  name: String
}

input CharacteristicsUpdateInput {
  name: String
}

input CharacteristicsUpdateManyDataInput {
  name: String
}

input CharacteristicsUpdateManyInput {
  create: [CharacteristicsCreateInput!]
  connect: [CharacteristicsWhereUniqueInput!]
  set: [CharacteristicsWhereUniqueInput!]
  disconnect: [CharacteristicsWhereUniqueInput!]
  delete: [CharacteristicsWhereUniqueInput!]
  update: [CharacteristicsUpdateWithWhereUniqueNestedInput!]
  updateMany: [CharacteristicsUpdateManyWithWhereNestedInput!]
  deleteMany: [CharacteristicsScalarWhereInput!]
  upsert: [CharacteristicsUpsertWithWhereUniqueNestedInput!]
}

input CharacteristicsUpdateManyMutationInput {
  name: String
}

input CharacteristicsUpdateManyWithWhereNestedInput {
  where: CharacteristicsScalarWhereInput!
  data: CharacteristicsUpdateManyDataInput!
}

input CharacteristicsUpdateWithWhereUniqueNestedInput {
  where: CharacteristicsWhereUniqueInput!
  data: CharacteristicsUpdateDataInput!
}

input CharacteristicsUpsertWithWhereUniqueNestedInput {
  where: CharacteristicsWhereUniqueInput!
  update: CharacteristicsUpdateDataInput!
  create: CharacteristicsCreateInput!
}

input CharacteristicsWhereInput {
  """Logical AND on all given filters."""
  AND: [CharacteristicsWhereInput!]

  """Logical OR on all given filters."""
  OR: [CharacteristicsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CharacteristicsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input CharacteristicsWhereUniqueInput {
  id: ID
}

type CountriesModel implements Node {
  id: ID!
  countryName: String!
}

"""A connection to a list of items."""
type CountriesModelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CountriesModelEdge]!
  aggregate: AggregateCountriesModel!
}

input CountriesModelCreateInput {
  id: ID
  countryName: String!
}

input CountriesModelCreateOneInput {
  create: CountriesModelCreateInput
  connect: CountriesModelWhereUniqueInput
}

"""An edge in a connection."""
type CountriesModelEdge {
  """The item at the end of the edge."""
  node: CountriesModel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CountriesModelOrderByInput {
  id_ASC
  id_DESC
  countryName_ASC
  countryName_DESC
}

type CountriesModelPreviousValues {
  id: ID!
  countryName: String!
}

type CountriesModelSubscriptionPayload {
  mutation: MutationType!
  node: CountriesModel
  updatedFields: [String!]
  previousValues: CountriesModelPreviousValues
}

input CountriesModelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CountriesModelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountriesModelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountriesModelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CountriesModelWhereInput
}

input CountriesModelUpdateDataInput {
  countryName: String
}

input CountriesModelUpdateInput {
  countryName: String
}

input CountriesModelUpdateManyMutationInput {
  countryName: String
}

input CountriesModelUpdateOneInput {
  create: CountriesModelCreateInput
  connect: CountriesModelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CountriesModelUpdateDataInput
  upsert: CountriesModelUpsertNestedInput
}

input CountriesModelUpdateOneRequiredInput {
  create: CountriesModelCreateInput
  connect: CountriesModelWhereUniqueInput
  update: CountriesModelUpdateDataInput
  upsert: CountriesModelUpsertNestedInput
}

input CountriesModelUpsertNestedInput {
  update: CountriesModelUpdateDataInput!
  create: CountriesModelCreateInput!
}

input CountriesModelWhereInput {
  """Logical AND on all given filters."""
  AND: [CountriesModelWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountriesModelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountriesModelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  countryName: String

  """All values that are not equal to given value."""
  countryName_not: String

  """All values that are contained in given list."""
  countryName_in: [String!]

  """All values that are not contained in given list."""
  countryName_not_in: [String!]

  """All values less than the given value."""
  countryName_lt: String

  """All values less than or equal the given value."""
  countryName_lte: String

  """All values greater than the given value."""
  countryName_gt: String

  """All values greater than or equal the given value."""
  countryName_gte: String

  """All values containing the given string."""
  countryName_contains: String

  """All values not containing the given string."""
  countryName_not_contains: String

  """All values starting with the given string."""
  countryName_starts_with: String

  """All values not starting with the given string."""
  countryName_not_starts_with: String

  """All values ending with the given string."""
  countryName_ends_with: String

  """All values not ending with the given string."""
  countryName_not_ends_with: String
}

input CountriesModelWhereUniqueInput {
  id: ID
}

type Couple implements Node {
  id: ID!
  userIdStudent: User!
  userIdGrandpa: User!
  description: String
}

"""A connection to a list of items."""
type CoupleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CoupleEdge]!
  aggregate: AggregateCouple!
}

input CoupleCreateInput {
  id: ID
  description: String
  userIdStudent: UserCreateOneInput!
  userIdGrandpa: UserCreateOneInput!
}

input CoupleCreateOneInput {
  create: CoupleCreateInput
  connect: CoupleWhereUniqueInput
}

"""An edge in a connection."""
type CoupleEdge {
  """The item at the end of the edge."""
  node: Couple!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CoupleOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
}

type CouplePreviousValues {
  id: ID!
  description: String
}

type CoupleSubscriptionPayload {
  mutation: MutationType!
  node: Couple
  updatedFields: [String!]
  previousValues: CouplePreviousValues
}

input CoupleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CoupleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CoupleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CoupleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CoupleWhereInput
}

input CoupleUpdateDataInput {
  description: String
  userIdStudent: UserUpdateOneRequiredInput
  userIdGrandpa: UserUpdateOneRequiredInput
}

input CoupleUpdateInput {
  description: String
  userIdStudent: UserUpdateOneRequiredInput
  userIdGrandpa: UserUpdateOneRequiredInput
}

input CoupleUpdateManyMutationInput {
  description: String
}

input CoupleUpdateOneInput {
  create: CoupleCreateInput
  connect: CoupleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CoupleUpdateDataInput
  upsert: CoupleUpsertNestedInput
}

input CoupleUpsertNestedInput {
  update: CoupleUpdateDataInput!
  create: CoupleCreateInput!
}

input CoupleWhereInput {
  """Logical AND on all given filters."""
  AND: [CoupleWhereInput!]

  """Logical OR on all given filters."""
  OR: [CoupleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CoupleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  userIdStudent: UserWhereInput
  userIdGrandpa: UserWhereInput
}

input CoupleWhereUniqueInput {
  id: ID
}

scalar DateTime

type EvaluationsGrandpa implements Node {
  id: ID!
  name: String
}

"""A connection to a list of items."""
type EvaluationsGrandpaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EvaluationsGrandpaEdge]!
  aggregate: AggregateEvaluationsGrandpa!
}

input EvaluationsGrandpaCreateInput {
  id: ID
  name: String
}

input EvaluationsGrandpaCreateManyInput {
  create: [EvaluationsGrandpaCreateInput!]
  connect: [EvaluationsGrandpaWhereUniqueInput!]
}

"""An edge in a connection."""
type EvaluationsGrandpaEdge {
  """The item at the end of the edge."""
  node: EvaluationsGrandpa!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EvaluationsGrandpaOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type EvaluationsGrandpaPreviousValues {
  id: ID!
  name: String
}

input EvaluationsGrandpaScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EvaluationsGrandpaScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EvaluationsGrandpaScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EvaluationsGrandpaScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type EvaluationsGrandpaSubscriptionPayload {
  mutation: MutationType!
  node: EvaluationsGrandpa
  updatedFields: [String!]
  previousValues: EvaluationsGrandpaPreviousValues
}

input EvaluationsGrandpaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EvaluationsGrandpaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EvaluationsGrandpaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EvaluationsGrandpaSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EvaluationsGrandpaWhereInput
}

input EvaluationsGrandpaUpdateDataInput {
  name: String
}

input EvaluationsGrandpaUpdateInput {
  name: String
}

input EvaluationsGrandpaUpdateManyDataInput {
  name: String
}

input EvaluationsGrandpaUpdateManyInput {
  create: [EvaluationsGrandpaCreateInput!]
  connect: [EvaluationsGrandpaWhereUniqueInput!]
  set: [EvaluationsGrandpaWhereUniqueInput!]
  disconnect: [EvaluationsGrandpaWhereUniqueInput!]
  delete: [EvaluationsGrandpaWhereUniqueInput!]
  update: [EvaluationsGrandpaUpdateWithWhereUniqueNestedInput!]
  updateMany: [EvaluationsGrandpaUpdateManyWithWhereNestedInput!]
  deleteMany: [EvaluationsGrandpaScalarWhereInput!]
  upsert: [EvaluationsGrandpaUpsertWithWhereUniqueNestedInput!]
}

input EvaluationsGrandpaUpdateManyMutationInput {
  name: String
}

input EvaluationsGrandpaUpdateManyWithWhereNestedInput {
  where: EvaluationsGrandpaScalarWhereInput!
  data: EvaluationsGrandpaUpdateManyDataInput!
}

input EvaluationsGrandpaUpdateWithWhereUniqueNestedInput {
  where: EvaluationsGrandpaWhereUniqueInput!
  data: EvaluationsGrandpaUpdateDataInput!
}

input EvaluationsGrandpaUpsertWithWhereUniqueNestedInput {
  where: EvaluationsGrandpaWhereUniqueInput!
  update: EvaluationsGrandpaUpdateDataInput!
  create: EvaluationsGrandpaCreateInput!
}

input EvaluationsGrandpaWhereInput {
  """Logical AND on all given filters."""
  AND: [EvaluationsGrandpaWhereInput!]

  """Logical OR on all given filters."""
  OR: [EvaluationsGrandpaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EvaluationsGrandpaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input EvaluationsGrandpaWhereUniqueInput {
  id: ID
}

type EvaluationsStudent implements Node {
  id: ID!
  name: String
}

"""A connection to a list of items."""
type EvaluationsStudentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EvaluationsStudentEdge]!
  aggregate: AggregateEvaluationsStudent!
}

input EvaluationsStudentCreateInput {
  id: ID
  name: String
}

input EvaluationsStudentCreateManyInput {
  create: [EvaluationsStudentCreateInput!]
  connect: [EvaluationsStudentWhereUniqueInput!]
}

"""An edge in a connection."""
type EvaluationsStudentEdge {
  """The item at the end of the edge."""
  node: EvaluationsStudent!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EvaluationsStudentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type EvaluationsStudentPreviousValues {
  id: ID!
  name: String
}

input EvaluationsStudentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EvaluationsStudentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EvaluationsStudentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EvaluationsStudentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type EvaluationsStudentSubscriptionPayload {
  mutation: MutationType!
  node: EvaluationsStudent
  updatedFields: [String!]
  previousValues: EvaluationsStudentPreviousValues
}

input EvaluationsStudentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EvaluationsStudentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EvaluationsStudentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EvaluationsStudentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EvaluationsStudentWhereInput
}

input EvaluationsStudentUpdateDataInput {
  name: String
}

input EvaluationsStudentUpdateInput {
  name: String
}

input EvaluationsStudentUpdateManyDataInput {
  name: String
}

input EvaluationsStudentUpdateManyInput {
  create: [EvaluationsStudentCreateInput!]
  connect: [EvaluationsStudentWhereUniqueInput!]
  set: [EvaluationsStudentWhereUniqueInput!]
  disconnect: [EvaluationsStudentWhereUniqueInput!]
  delete: [EvaluationsStudentWhereUniqueInput!]
  update: [EvaluationsStudentUpdateWithWhereUniqueNestedInput!]
  updateMany: [EvaluationsStudentUpdateManyWithWhereNestedInput!]
  deleteMany: [EvaluationsStudentScalarWhereInput!]
  upsert: [EvaluationsStudentUpsertWithWhereUniqueNestedInput!]
}

input EvaluationsStudentUpdateManyMutationInput {
  name: String
}

input EvaluationsStudentUpdateManyWithWhereNestedInput {
  where: EvaluationsStudentScalarWhereInput!
  data: EvaluationsStudentUpdateManyDataInput!
}

input EvaluationsStudentUpdateWithWhereUniqueNestedInput {
  where: EvaluationsStudentWhereUniqueInput!
  data: EvaluationsStudentUpdateDataInput!
}

input EvaluationsStudentUpsertWithWhereUniqueNestedInput {
  where: EvaluationsStudentWhereUniqueInput!
  update: EvaluationsStudentUpdateDataInput!
  create: EvaluationsStudentCreateInput!
}

input EvaluationsStudentWhereInput {
  """Logical AND on all given filters."""
  AND: [EvaluationsStudentWhereInput!]

  """Logical OR on all given filters."""
  OR: [EvaluationsStudentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EvaluationsStudentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input EvaluationsStudentWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
  NO_GENDE
}

type House implements Node {
  id: ID!
  userId: User!
  province: Province!
  city: String!
  adress: String!
  cp: String!
  coordinates: Float!
  characteristics(where: CharacteristicsWhereInput, orderBy: CharacteristicsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Characteristics!]
  m2: Int!
  bathrooms: Int!
  createDate: DateTime
  updateDate: DateTime
}

"""A connection to a list of items."""
type HouseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HouseEdge]!
  aggregate: AggregateHouse!
}

input HouseCreateInput {
  id: ID
  city: String!
  adress: String!
  cp: String!
  coordinates: Float!
  m2: Int!
  bathrooms: Int!
  userId: UserCreateOneInput!
  province: ProvinceCreateOneInput!
  characteristics: CharacteristicsCreateManyInput
}

"""An edge in a connection."""
type HouseEdge {
  """The item at the end of the edge."""
  node: House!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HouseOrderByInput {
  id_ASC
  id_DESC
  city_ASC
  city_DESC
  adress_ASC
  adress_DESC
  cp_ASC
  cp_DESC
  coordinates_ASC
  coordinates_DESC
  m2_ASC
  m2_DESC
  bathrooms_ASC
  bathrooms_DESC
  createDate_ASC
  createDate_DESC
  updateDate_ASC
  updateDate_DESC
}

type HousePreviousValues {
  id: ID!
  city: String!
  adress: String!
  cp: String!
  coordinates: Float!
  m2: Int!
  bathrooms: Int!
  createDate: DateTime
  updateDate: DateTime
}

type HouseSubscriptionPayload {
  mutation: MutationType!
  node: House
  updatedFields: [String!]
  previousValues: HousePreviousValues
}

input HouseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HouseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HouseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HouseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HouseWhereInput
}

input HouseUpdateInput {
  city: String
  adress: String
  cp: String
  coordinates: Float
  m2: Int
  bathrooms: Int
  userId: UserUpdateOneRequiredInput
  province: ProvinceUpdateOneRequiredInput
  characteristics: CharacteristicsUpdateManyInput
}

input HouseUpdateManyMutationInput {
  city: String
  adress: String
  cp: String
  coordinates: Float
  m2: Int
  bathrooms: Int
}

input HouseWhereInput {
  """Logical AND on all given filters."""
  AND: [HouseWhereInput!]

  """Logical OR on all given filters."""
  OR: [HouseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HouseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  adress: String

  """All values that are not equal to given value."""
  adress_not: String

  """All values that are contained in given list."""
  adress_in: [String!]

  """All values that are not contained in given list."""
  adress_not_in: [String!]

  """All values less than the given value."""
  adress_lt: String

  """All values less than or equal the given value."""
  adress_lte: String

  """All values greater than the given value."""
  adress_gt: String

  """All values greater than or equal the given value."""
  adress_gte: String

  """All values containing the given string."""
  adress_contains: String

  """All values not containing the given string."""
  adress_not_contains: String

  """All values starting with the given string."""
  adress_starts_with: String

  """All values not starting with the given string."""
  adress_not_starts_with: String

  """All values ending with the given string."""
  adress_ends_with: String

  """All values not ending with the given string."""
  adress_not_ends_with: String
  cp: String

  """All values that are not equal to given value."""
  cp_not: String

  """All values that are contained in given list."""
  cp_in: [String!]

  """All values that are not contained in given list."""
  cp_not_in: [String!]

  """All values less than the given value."""
  cp_lt: String

  """All values less than or equal the given value."""
  cp_lte: String

  """All values greater than the given value."""
  cp_gt: String

  """All values greater than or equal the given value."""
  cp_gte: String

  """All values containing the given string."""
  cp_contains: String

  """All values not containing the given string."""
  cp_not_contains: String

  """All values starting with the given string."""
  cp_starts_with: String

  """All values not starting with the given string."""
  cp_not_starts_with: String

  """All values ending with the given string."""
  cp_ends_with: String

  """All values not ending with the given string."""
  cp_not_ends_with: String
  coordinates: Float

  """All values that are not equal to given value."""
  coordinates_not: Float

  """All values that are contained in given list."""
  coordinates_in: [Float!]

  """All values that are not contained in given list."""
  coordinates_not_in: [Float!]

  """All values less than the given value."""
  coordinates_lt: Float

  """All values less than or equal the given value."""
  coordinates_lte: Float

  """All values greater than the given value."""
  coordinates_gt: Float

  """All values greater than or equal the given value."""
  coordinates_gte: Float
  m2: Int

  """All values that are not equal to given value."""
  m2_not: Int

  """All values that are contained in given list."""
  m2_in: [Int!]

  """All values that are not contained in given list."""
  m2_not_in: [Int!]

  """All values less than the given value."""
  m2_lt: Int

  """All values less than or equal the given value."""
  m2_lte: Int

  """All values greater than the given value."""
  m2_gt: Int

  """All values greater than or equal the given value."""
  m2_gte: Int
  bathrooms: Int

  """All values that are not equal to given value."""
  bathrooms_not: Int

  """All values that are contained in given list."""
  bathrooms_in: [Int!]

  """All values that are not contained in given list."""
  bathrooms_not_in: [Int!]

  """All values less than the given value."""
  bathrooms_lt: Int

  """All values less than or equal the given value."""
  bathrooms_lte: Int

  """All values greater than the given value."""
  bathrooms_gt: Int

  """All values greater than or equal the given value."""
  bathrooms_gte: Int
  createDate: DateTime

  """All values that are not equal to given value."""
  createDate_not: DateTime

  """All values that are contained in given list."""
  createDate_in: [DateTime!]

  """All values that are not contained in given list."""
  createDate_not_in: [DateTime!]

  """All values less than the given value."""
  createDate_lt: DateTime

  """All values less than or equal the given value."""
  createDate_lte: DateTime

  """All values greater than the given value."""
  createDate_gt: DateTime

  """All values greater than or equal the given value."""
  createDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  userId: UserWhereInput
  province: ProvinceWhereInput
  characteristics_every: CharacteristicsWhereInput
  characteristics_some: CharacteristicsWhereInput
  characteristics_none: CharacteristicsWhereInput
}

input HouseWhereUniqueInput {
  id: ID
}

type imagesDocument implements Node {
  id: ID!
  photo: String!
  userId: User!
}

"""A connection to a list of items."""
type imagesDocumentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [imagesDocumentEdge]!
  aggregate: AggregateimagesDocument!
}

input imagesDocumentCreateInput {
  id: ID
  photo: String!
  userId: UserCreateOneInput!
}

input imagesDocumentCreateManyInput {
  create: [imagesDocumentCreateInput!]
  connect: [imagesDocumentWhereUniqueInput!]
}

"""An edge in a connection."""
type imagesDocumentEdge {
  """The item at the end of the edge."""
  node: imagesDocument!

  """A cursor for use in pagination."""
  cursor: String!
}

enum imagesDocumentOrderByInput {
  id_ASC
  id_DESC
  photo_ASC
  photo_DESC
}

type imagesDocumentPreviousValues {
  id: ID!
  photo: String!
}

input imagesDocumentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [imagesDocumentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [imagesDocumentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [imagesDocumentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  photo: String

  """All values that are not equal to given value."""
  photo_not: String

  """All values that are contained in given list."""
  photo_in: [String!]

  """All values that are not contained in given list."""
  photo_not_in: [String!]

  """All values less than the given value."""
  photo_lt: String

  """All values less than or equal the given value."""
  photo_lte: String

  """All values greater than the given value."""
  photo_gt: String

  """All values greater than or equal the given value."""
  photo_gte: String

  """All values containing the given string."""
  photo_contains: String

  """All values not containing the given string."""
  photo_not_contains: String

  """All values starting with the given string."""
  photo_starts_with: String

  """All values not starting with the given string."""
  photo_not_starts_with: String

  """All values ending with the given string."""
  photo_ends_with: String

  """All values not ending with the given string."""
  photo_not_ends_with: String
}

type imagesDocumentSubscriptionPayload {
  mutation: MutationType!
  node: imagesDocument
  updatedFields: [String!]
  previousValues: imagesDocumentPreviousValues
}

input imagesDocumentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [imagesDocumentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [imagesDocumentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [imagesDocumentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: imagesDocumentWhereInput
}

input imagesDocumentUpdateDataInput {
  photo: String
  userId: UserUpdateOneRequiredInput
}

input imagesDocumentUpdateInput {
  photo: String
  userId: UserUpdateOneRequiredInput
}

input imagesDocumentUpdateManyDataInput {
  photo: String
}

input imagesDocumentUpdateManyInput {
  create: [imagesDocumentCreateInput!]
  connect: [imagesDocumentWhereUniqueInput!]
  set: [imagesDocumentWhereUniqueInput!]
  disconnect: [imagesDocumentWhereUniqueInput!]
  delete: [imagesDocumentWhereUniqueInput!]
  update: [imagesDocumentUpdateWithWhereUniqueNestedInput!]
  updateMany: [imagesDocumentUpdateManyWithWhereNestedInput!]
  deleteMany: [imagesDocumentScalarWhereInput!]
  upsert: [imagesDocumentUpsertWithWhereUniqueNestedInput!]
}

input imagesDocumentUpdateManyMutationInput {
  photo: String
}

input imagesDocumentUpdateManyWithWhereNestedInput {
  where: imagesDocumentScalarWhereInput!
  data: imagesDocumentUpdateManyDataInput!
}

input imagesDocumentUpdateWithWhereUniqueNestedInput {
  where: imagesDocumentWhereUniqueInput!
  data: imagesDocumentUpdateDataInput!
}

input imagesDocumentUpsertWithWhereUniqueNestedInput {
  where: imagesDocumentWhereUniqueInput!
  update: imagesDocumentUpdateDataInput!
  create: imagesDocumentCreateInput!
}

input imagesDocumentWhereInput {
  """Logical AND on all given filters."""
  AND: [imagesDocumentWhereInput!]

  """Logical OR on all given filters."""
  OR: [imagesDocumentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [imagesDocumentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  photo: String

  """All values that are not equal to given value."""
  photo_not: String

  """All values that are contained in given list."""
  photo_in: [String!]

  """All values that are not contained in given list."""
  photo_not_in: [String!]

  """All values less than the given value."""
  photo_lt: String

  """All values less than or equal the given value."""
  photo_lte: String

  """All values greater than the given value."""
  photo_gt: String

  """All values greater than or equal the given value."""
  photo_gte: String

  """All values containing the given string."""
  photo_contains: String

  """All values not containing the given string."""
  photo_not_contains: String

  """All values starting with the given string."""
  photo_starts_with: String

  """All values not starting with the given string."""
  photo_not_starts_with: String

  """All values ending with the given string."""
  photo_ends_with: String

  """All values not ending with the given string."""
  photo_not_ends_with: String
  userId: UserWhereInput
}

input imagesDocumentWhereUniqueInput {
  id: ID
}

type imagesUniversity implements Node {
  id: ID!
  photo: String!
  userId: User!
}

"""A connection to a list of items."""
type imagesUniversityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [imagesUniversityEdge]!
  aggregate: AggregateimagesUniversity!
}

input imagesUniversityCreateInput {
  id: ID
  photo: String!
  userId: UserCreateOneInput!
}

input imagesUniversityCreateManyInput {
  create: [imagesUniversityCreateInput!]
  connect: [imagesUniversityWhereUniqueInput!]
}

"""An edge in a connection."""
type imagesUniversityEdge {
  """The item at the end of the edge."""
  node: imagesUniversity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum imagesUniversityOrderByInput {
  id_ASC
  id_DESC
  photo_ASC
  photo_DESC
}

type imagesUniversityPreviousValues {
  id: ID!
  photo: String!
}

input imagesUniversityScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [imagesUniversityScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [imagesUniversityScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [imagesUniversityScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  photo: String

  """All values that are not equal to given value."""
  photo_not: String

  """All values that are contained in given list."""
  photo_in: [String!]

  """All values that are not contained in given list."""
  photo_not_in: [String!]

  """All values less than the given value."""
  photo_lt: String

  """All values less than or equal the given value."""
  photo_lte: String

  """All values greater than the given value."""
  photo_gt: String

  """All values greater than or equal the given value."""
  photo_gte: String

  """All values containing the given string."""
  photo_contains: String

  """All values not containing the given string."""
  photo_not_contains: String

  """All values starting with the given string."""
  photo_starts_with: String

  """All values not starting with the given string."""
  photo_not_starts_with: String

  """All values ending with the given string."""
  photo_ends_with: String

  """All values not ending with the given string."""
  photo_not_ends_with: String
}

type imagesUniversitySubscriptionPayload {
  mutation: MutationType!
  node: imagesUniversity
  updatedFields: [String!]
  previousValues: imagesUniversityPreviousValues
}

input imagesUniversitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [imagesUniversitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [imagesUniversitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [imagesUniversitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: imagesUniversityWhereInput
}

input imagesUniversityUpdateDataInput {
  photo: String
  userId: UserUpdateOneRequiredInput
}

input imagesUniversityUpdateInput {
  photo: String
  userId: UserUpdateOneRequiredInput
}

input imagesUniversityUpdateManyDataInput {
  photo: String
}

input imagesUniversityUpdateManyInput {
  create: [imagesUniversityCreateInput!]
  connect: [imagesUniversityWhereUniqueInput!]
  set: [imagesUniversityWhereUniqueInput!]
  disconnect: [imagesUniversityWhereUniqueInput!]
  delete: [imagesUniversityWhereUniqueInput!]
  update: [imagesUniversityUpdateWithWhereUniqueNestedInput!]
  updateMany: [imagesUniversityUpdateManyWithWhereNestedInput!]
  deleteMany: [imagesUniversityScalarWhereInput!]
  upsert: [imagesUniversityUpsertWithWhereUniqueNestedInput!]
}

input imagesUniversityUpdateManyMutationInput {
  photo: String
}

input imagesUniversityUpdateManyWithWhereNestedInput {
  where: imagesUniversityScalarWhereInput!
  data: imagesUniversityUpdateManyDataInput!
}

input imagesUniversityUpdateWithWhereUniqueNestedInput {
  where: imagesUniversityWhereUniqueInput!
  data: imagesUniversityUpdateDataInput!
}

input imagesUniversityUpsertWithWhereUniqueNestedInput {
  where: imagesUniversityWhereUniqueInput!
  update: imagesUniversityUpdateDataInput!
  create: imagesUniversityCreateInput!
}

input imagesUniversityWhereInput {
  """Logical AND on all given filters."""
  AND: [imagesUniversityWhereInput!]

  """Logical OR on all given filters."""
  OR: [imagesUniversityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [imagesUniversityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  photo: String

  """All values that are not equal to given value."""
  photo_not: String

  """All values that are contained in given list."""
  photo_in: [String!]

  """All values that are not contained in given list."""
  photo_not_in: [String!]

  """All values less than the given value."""
  photo_lt: String

  """All values less than or equal the given value."""
  photo_lte: String

  """All values greater than the given value."""
  photo_gt: String

  """All values greater than or equal the given value."""
  photo_gte: String

  """All values containing the given string."""
  photo_contains: String

  """All values not containing the given string."""
  photo_not_contains: String

  """All values starting with the given string."""
  photo_starts_with: String

  """All values not starting with the given string."""
  photo_not_starts_with: String

  """All values ending with the given string."""
  photo_ends_with: String

  """All values not ending with the given string."""
  photo_not_ends_with: String
  userId: UserWhereInput
}

input imagesUniversityWhereUniqueInput {
  id: ID
}

type Interviews implements Node {
  id: ID!
  name: String
}

"""A connection to a list of items."""
type InterviewsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InterviewsEdge]!
  aggregate: AggregateInterviews!
}

input InterviewsCreateInput {
  id: ID
  name: String
}

input InterviewsCreateManyInput {
  create: [InterviewsCreateInput!]
  connect: [InterviewsWhereUniqueInput!]
}

"""An edge in a connection."""
type InterviewsEdge {
  """The item at the end of the edge."""
  node: Interviews!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InterviewsOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type InterviewsPreviousValues {
  id: ID!
  name: String
}

input InterviewsScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InterviewsScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InterviewsScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InterviewsScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type InterviewsSubscriptionPayload {
  mutation: MutationType!
  node: Interviews
  updatedFields: [String!]
  previousValues: InterviewsPreviousValues
}

input InterviewsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InterviewsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InterviewsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InterviewsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InterviewsWhereInput
}

input InterviewsUpdateDataInput {
  name: String
}

input InterviewsUpdateInput {
  name: String
}

input InterviewsUpdateManyDataInput {
  name: String
}

input InterviewsUpdateManyInput {
  create: [InterviewsCreateInput!]
  connect: [InterviewsWhereUniqueInput!]
  set: [InterviewsWhereUniqueInput!]
  disconnect: [InterviewsWhereUniqueInput!]
  delete: [InterviewsWhereUniqueInput!]
  update: [InterviewsUpdateWithWhereUniqueNestedInput!]
  updateMany: [InterviewsUpdateManyWithWhereNestedInput!]
  deleteMany: [InterviewsScalarWhereInput!]
  upsert: [InterviewsUpsertWithWhereUniqueNestedInput!]
}

input InterviewsUpdateManyMutationInput {
  name: String
}

input InterviewsUpdateManyWithWhereNestedInput {
  where: InterviewsScalarWhereInput!
  data: InterviewsUpdateManyDataInput!
}

input InterviewsUpdateWithWhereUniqueNestedInput {
  where: InterviewsWhereUniqueInput!
  data: InterviewsUpdateDataInput!
}

input InterviewsUpsertWithWhereUniqueNestedInput {
  where: InterviewsWhereUniqueInput!
  update: InterviewsUpdateDataInput!
  create: InterviewsCreateInput!
}

input InterviewsWhereInput {
  """Logical AND on all given filters."""
  AND: [InterviewsWhereInput!]

  """Logical OR on all given filters."""
  OR: [InterviewsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InterviewsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input InterviewsWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createHouse(data: HouseCreateInput!): House!
  createUserStudent(data: UserStudentCreateInput!): UserStudent!
  createUserGrandpa(data: UserGrandpaCreateInput!): UserGrandpa!
  createimagesUniversity(data: imagesUniversityCreateInput!): imagesUniversity!
  createimagesDocument(data: imagesDocumentCreateInput!): imagesDocument!
  createUser(data: UserCreateInput!): User!
  createEvaluationsGrandpa(data: EvaluationsGrandpaCreateInput!): EvaluationsGrandpa!
  createSourcesModel(data: SourcesModelCreateInput!): SourcesModel!
  createTypeUser(data: TypeUserCreateInput!): TypeUser!
  createProvince(data: ProvinceCreateInput!): Province!
  createUniversitiesModel(data: UniversitiesModelCreateInput!): UniversitiesModel!
  createCouple(data: CoupleCreateInput!): Couple!
  createUserTech(data: UserTechCreateInput!): UserTech!
  createEvaluationsStudent(data: EvaluationsStudentCreateInput!): EvaluationsStudent!
  createInterviews(data: InterviewsCreateInput!): Interviews!
  createCareersModel(data: CareersModelCreateInput!): CareersModel!
  createCharacteristics(data: CharacteristicsCreateInput!): Characteristics!
  createAssociation(data: AssociationCreateInput!): Association!
  createCountriesModel(data: CountriesModelCreateInput!): CountriesModel!
  updateHouse(data: HouseUpdateInput!, where: HouseWhereUniqueInput!): House
  updateUserStudent(data: UserStudentUpdateInput!, where: UserStudentWhereUniqueInput!): UserStudent
  updateUserGrandpa(data: UserGrandpaUpdateInput!, where: UserGrandpaWhereUniqueInput!): UserGrandpa
  updateimagesUniversity(data: imagesUniversityUpdateInput!, where: imagesUniversityWhereUniqueInput!): imagesUniversity
  updateimagesDocument(data: imagesDocumentUpdateInput!, where: imagesDocumentWhereUniqueInput!): imagesDocument
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateEvaluationsGrandpa(data: EvaluationsGrandpaUpdateInput!, where: EvaluationsGrandpaWhereUniqueInput!): EvaluationsGrandpa
  updateSourcesModel(data: SourcesModelUpdateInput!, where: SourcesModelWhereUniqueInput!): SourcesModel
  updateTypeUser(data: TypeUserUpdateInput!, where: TypeUserWhereUniqueInput!): TypeUser
  updateProvince(data: ProvinceUpdateInput!, where: ProvinceWhereUniqueInput!): Province
  updateUniversitiesModel(data: UniversitiesModelUpdateInput!, where: UniversitiesModelWhereUniqueInput!): UniversitiesModel
  updateCouple(data: CoupleUpdateInput!, where: CoupleWhereUniqueInput!): Couple
  updateUserTech(data: UserTechUpdateInput!, where: UserTechWhereUniqueInput!): UserTech
  updateEvaluationsStudent(data: EvaluationsStudentUpdateInput!, where: EvaluationsStudentWhereUniqueInput!): EvaluationsStudent
  updateInterviews(data: InterviewsUpdateInput!, where: InterviewsWhereUniqueInput!): Interviews
  updateCareersModel(data: CareersModelUpdateInput!, where: CareersModelWhereUniqueInput!): CareersModel
  updateCharacteristics(data: CharacteristicsUpdateInput!, where: CharacteristicsWhereUniqueInput!): Characteristics
  updateAssociation(data: AssociationUpdateInput!, where: AssociationWhereUniqueInput!): Association
  updateCountriesModel(data: CountriesModelUpdateInput!, where: CountriesModelWhereUniqueInput!): CountriesModel
  deleteHouse(where: HouseWhereUniqueInput!): House
  deleteUserStudent(where: UserStudentWhereUniqueInput!): UserStudent
  deleteUserGrandpa(where: UserGrandpaWhereUniqueInput!): UserGrandpa
  deleteimagesUniversity(where: imagesUniversityWhereUniqueInput!): imagesUniversity
  deleteimagesDocument(where: imagesDocumentWhereUniqueInput!): imagesDocument
  deleteUser(where: UserWhereUniqueInput!): User
  deleteEvaluationsGrandpa(where: EvaluationsGrandpaWhereUniqueInput!): EvaluationsGrandpa
  deleteSourcesModel(where: SourcesModelWhereUniqueInput!): SourcesModel
  deleteTypeUser(where: TypeUserWhereUniqueInput!): TypeUser
  deleteProvince(where: ProvinceWhereUniqueInput!): Province
  deleteUniversitiesModel(where: UniversitiesModelWhereUniqueInput!): UniversitiesModel
  deleteCouple(where: CoupleWhereUniqueInput!): Couple
  deleteUserTech(where: UserTechWhereUniqueInput!): UserTech
  deleteEvaluationsStudent(where: EvaluationsStudentWhereUniqueInput!): EvaluationsStudent
  deleteInterviews(where: InterviewsWhereUniqueInput!): Interviews
  deleteCareersModel(where: CareersModelWhereUniqueInput!): CareersModel
  deleteCharacteristics(where: CharacteristicsWhereUniqueInput!): Characteristics
  deleteAssociation(where: AssociationWhereUniqueInput!): Association
  deleteCountriesModel(where: CountriesModelWhereUniqueInput!): CountriesModel
  upsertHouse(where: HouseWhereUniqueInput!, create: HouseCreateInput!, update: HouseUpdateInput!): House!
  upsertUserStudent(where: UserStudentWhereUniqueInput!, create: UserStudentCreateInput!, update: UserStudentUpdateInput!): UserStudent!
  upsertUserGrandpa(where: UserGrandpaWhereUniqueInput!, create: UserGrandpaCreateInput!, update: UserGrandpaUpdateInput!): UserGrandpa!
  upsertimagesUniversity(where: imagesUniversityWhereUniqueInput!, create: imagesUniversityCreateInput!, update: imagesUniversityUpdateInput!): imagesUniversity!
  upsertimagesDocument(where: imagesDocumentWhereUniqueInput!, create: imagesDocumentCreateInput!, update: imagesDocumentUpdateInput!): imagesDocument!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertEvaluationsGrandpa(where: EvaluationsGrandpaWhereUniqueInput!, create: EvaluationsGrandpaCreateInput!, update: EvaluationsGrandpaUpdateInput!): EvaluationsGrandpa!
  upsertSourcesModel(where: SourcesModelWhereUniqueInput!, create: SourcesModelCreateInput!, update: SourcesModelUpdateInput!): SourcesModel!
  upsertTypeUser(where: TypeUserWhereUniqueInput!, create: TypeUserCreateInput!, update: TypeUserUpdateInput!): TypeUser!
  upsertProvince(where: ProvinceWhereUniqueInput!, create: ProvinceCreateInput!, update: ProvinceUpdateInput!): Province!
  upsertUniversitiesModel(where: UniversitiesModelWhereUniqueInput!, create: UniversitiesModelCreateInput!, update: UniversitiesModelUpdateInput!): UniversitiesModel!
  upsertCouple(where: CoupleWhereUniqueInput!, create: CoupleCreateInput!, update: CoupleUpdateInput!): Couple!
  upsertUserTech(where: UserTechWhereUniqueInput!, create: UserTechCreateInput!, update: UserTechUpdateInput!): UserTech!
  upsertEvaluationsStudent(where: EvaluationsStudentWhereUniqueInput!, create: EvaluationsStudentCreateInput!, update: EvaluationsStudentUpdateInput!): EvaluationsStudent!
  upsertInterviews(where: InterviewsWhereUniqueInput!, create: InterviewsCreateInput!, update: InterviewsUpdateInput!): Interviews!
  upsertCareersModel(where: CareersModelWhereUniqueInput!, create: CareersModelCreateInput!, update: CareersModelUpdateInput!): CareersModel!
  upsertCharacteristics(where: CharacteristicsWhereUniqueInput!, create: CharacteristicsCreateInput!, update: CharacteristicsUpdateInput!): Characteristics!
  upsertAssociation(where: AssociationWhereUniqueInput!, create: AssociationCreateInput!, update: AssociationUpdateInput!): Association!
  upsertCountriesModel(where: CountriesModelWhereUniqueInput!, create: CountriesModelCreateInput!, update: CountriesModelUpdateInput!): CountriesModel!
  updateManyHouses(data: HouseUpdateManyMutationInput!, where: HouseWhereInput): BatchPayload!
  updateManyUserStudents(data: UserStudentUpdateManyMutationInput!, where: UserStudentWhereInput): BatchPayload!
  updateManyUserGrandpas(data: UserGrandpaUpdateManyMutationInput!, where: UserGrandpaWhereInput): BatchPayload!
  updateManyImagesUniversities(data: imagesUniversityUpdateManyMutationInput!, where: imagesUniversityWhereInput): BatchPayload!
  updateManyImagesDocuments(data: imagesDocumentUpdateManyMutationInput!, where: imagesDocumentWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyEvaluationsGrandpas(data: EvaluationsGrandpaUpdateManyMutationInput!, where: EvaluationsGrandpaWhereInput): BatchPayload!
  updateManySourcesModels(data: SourcesModelUpdateManyMutationInput!, where: SourcesModelWhereInput): BatchPayload!
  updateManyTypeUsers(data: TypeUserUpdateManyMutationInput!, where: TypeUserWhereInput): BatchPayload!
  updateManyProvinces(data: ProvinceUpdateManyMutationInput!, where: ProvinceWhereInput): BatchPayload!
  updateManyUniversitiesModels(data: UniversitiesModelUpdateManyMutationInput!, where: UniversitiesModelWhereInput): BatchPayload!
  updateManyCouples(data: CoupleUpdateManyMutationInput!, where: CoupleWhereInput): BatchPayload!
  updateManyUserTeches(data: UserTechUpdateManyMutationInput!, where: UserTechWhereInput): BatchPayload!
  updateManyEvaluationsStudents(data: EvaluationsStudentUpdateManyMutationInput!, where: EvaluationsStudentWhereInput): BatchPayload!
  updateManyInterviewses(data: InterviewsUpdateManyMutationInput!, where: InterviewsWhereInput): BatchPayload!
  updateManyCareersModels(data: CareersModelUpdateManyMutationInput!, where: CareersModelWhereInput): BatchPayload!
  updateManyCharacteristicses(data: CharacteristicsUpdateManyMutationInput!, where: CharacteristicsWhereInput): BatchPayload!
  updateManyAssociations(data: AssociationUpdateManyMutationInput!, where: AssociationWhereInput): BatchPayload!
  updateManyCountriesModels(data: CountriesModelUpdateManyMutationInput!, where: CountriesModelWhereInput): BatchPayload!
  deleteManyHouses(where: HouseWhereInput): BatchPayload!
  deleteManyUserStudents(where: UserStudentWhereInput): BatchPayload!
  deleteManyUserGrandpas(where: UserGrandpaWhereInput): BatchPayload!
  deleteManyImagesUniversities(where: imagesUniversityWhereInput): BatchPayload!
  deleteManyImagesDocuments(where: imagesDocumentWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyEvaluationsGrandpas(where: EvaluationsGrandpaWhereInput): BatchPayload!
  deleteManySourcesModels(where: SourcesModelWhereInput): BatchPayload!
  deleteManyTypeUsers(where: TypeUserWhereInput): BatchPayload!
  deleteManyProvinces(where: ProvinceWhereInput): BatchPayload!
  deleteManyUniversitiesModels(where: UniversitiesModelWhereInput): BatchPayload!
  deleteManyCouples(where: CoupleWhereInput): BatchPayload!
  deleteManyUserTeches(where: UserTechWhereInput): BatchPayload!
  deleteManyEvaluationsStudents(where: EvaluationsStudentWhereInput): BatchPayload!
  deleteManyInterviewses(where: InterviewsWhereInput): BatchPayload!
  deleteManyCareersModels(where: CareersModelWhereInput): BatchPayload!
  deleteManyCharacteristicses(where: CharacteristicsWhereInput): BatchPayload!
  deleteManyAssociations(where: AssociationWhereInput): BatchPayload!
  deleteManyCountriesModels(where: CountriesModelWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permissions {
  USER
  ADMIN
  TECH
  STUDENT
  ADMINASSOCIATION
  GRANDPA
}

type Province implements Node {
  id: ID!
  provinceName: String!
  country: CountriesModel!
}

"""A connection to a list of items."""
type ProvinceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProvinceEdge]!
  aggregate: AggregateProvince!
}

input ProvinceCreateInput {
  id: ID
  provinceName: String!
  country: CountriesModelCreateOneInput!
}

input ProvinceCreateOneInput {
  create: ProvinceCreateInput
  connect: ProvinceWhereUniqueInput
}

"""An edge in a connection."""
type ProvinceEdge {
  """The item at the end of the edge."""
  node: Province!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProvinceOrderByInput {
  id_ASC
  id_DESC
  provinceName_ASC
  provinceName_DESC
}

type ProvincePreviousValues {
  id: ID!
  provinceName: String!
}

type ProvinceSubscriptionPayload {
  mutation: MutationType!
  node: Province
  updatedFields: [String!]
  previousValues: ProvincePreviousValues
}

input ProvinceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProvinceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProvinceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProvinceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProvinceWhereInput
}

input ProvinceUpdateDataInput {
  provinceName: String
  country: CountriesModelUpdateOneRequiredInput
}

input ProvinceUpdateInput {
  provinceName: String
  country: CountriesModelUpdateOneRequiredInput
}

input ProvinceUpdateManyMutationInput {
  provinceName: String
}

input ProvinceUpdateOneInput {
  create: ProvinceCreateInput
  connect: ProvinceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProvinceUpdateDataInput
  upsert: ProvinceUpsertNestedInput
}

input ProvinceUpdateOneRequiredInput {
  create: ProvinceCreateInput
  connect: ProvinceWhereUniqueInput
  update: ProvinceUpdateDataInput
  upsert: ProvinceUpsertNestedInput
}

input ProvinceUpsertNestedInput {
  update: ProvinceUpdateDataInput!
  create: ProvinceCreateInput!
}

input ProvinceWhereInput {
  """Logical AND on all given filters."""
  AND: [ProvinceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProvinceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProvinceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  provinceName: String

  """All values that are not equal to given value."""
  provinceName_not: String

  """All values that are contained in given list."""
  provinceName_in: [String!]

  """All values that are not contained in given list."""
  provinceName_not_in: [String!]

  """All values less than the given value."""
  provinceName_lt: String

  """All values less than or equal the given value."""
  provinceName_lte: String

  """All values greater than the given value."""
  provinceName_gt: String

  """All values greater than or equal the given value."""
  provinceName_gte: String

  """All values containing the given string."""
  provinceName_contains: String

  """All values not containing the given string."""
  provinceName_not_contains: String

  """All values starting with the given string."""
  provinceName_starts_with: String

  """All values not starting with the given string."""
  provinceName_not_starts_with: String

  """All values ending with the given string."""
  provinceName_ends_with: String

  """All values not ending with the given string."""
  provinceName_not_ends_with: String
  country: CountriesModelWhereInput
}

input ProvinceWhereUniqueInput {
  id: ID
}

type Query {
  houses(where: HouseWhereInput, orderBy: HouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [House]!
  userStudents(where: UserStudentWhereInput, orderBy: UserStudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserStudent]!
  userGrandpas(where: UserGrandpaWhereInput, orderBy: UserGrandpaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGrandpa]!
  imagesUniversities(where: imagesUniversityWhereInput, orderBy: imagesUniversityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [imagesUniversity]!
  imagesDocuments(where: imagesDocumentWhereInput, orderBy: imagesDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [imagesDocument]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  evaluationsGrandpas(where: EvaluationsGrandpaWhereInput, orderBy: EvaluationsGrandpaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EvaluationsGrandpa]!
  sourcesModels(where: SourcesModelWhereInput, orderBy: SourcesModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SourcesModel]!
  typeUsers(where: TypeUserWhereInput, orderBy: TypeUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeUser]!
  provinces(where: ProvinceWhereInput, orderBy: ProvinceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Province]!
  universitiesModels(where: UniversitiesModelWhereInput, orderBy: UniversitiesModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UniversitiesModel]!
  couples(where: CoupleWhereInput, orderBy: CoupleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Couple]!
  userTeches(where: UserTechWhereInput, orderBy: UserTechOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserTech]!
  evaluationsStudents(where: EvaluationsStudentWhereInput, orderBy: EvaluationsStudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EvaluationsStudent]!
  interviewses(where: InterviewsWhereInput, orderBy: InterviewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interviews]!
  careersModels(where: CareersModelWhereInput, orderBy: CareersModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CareersModel]!
  characteristicses(where: CharacteristicsWhereInput, orderBy: CharacteristicsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Characteristics]!
  associations(where: AssociationWhereInput, orderBy: AssociationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Association]!
  countriesModels(where: CountriesModelWhereInput, orderBy: CountriesModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CountriesModel]!
  house(where: HouseWhereUniqueInput!): House
  userStudent(where: UserStudentWhereUniqueInput!): UserStudent
  userGrandpa(where: UserGrandpaWhereUniqueInput!): UserGrandpa
  imagesUniversity(where: imagesUniversityWhereUniqueInput!): imagesUniversity
  imagesDocument(where: imagesDocumentWhereUniqueInput!): imagesDocument
  user(where: UserWhereUniqueInput!): User
  evaluationsGrandpa(where: EvaluationsGrandpaWhereUniqueInput!): EvaluationsGrandpa
  sourcesModel(where: SourcesModelWhereUniqueInput!): SourcesModel
  typeUser(where: TypeUserWhereUniqueInput!): TypeUser
  province(where: ProvinceWhereUniqueInput!): Province
  universitiesModel(where: UniversitiesModelWhereUniqueInput!): UniversitiesModel
  couple(where: CoupleWhereUniqueInput!): Couple
  userTech(where: UserTechWhereUniqueInput!): UserTech
  evaluationsStudent(where: EvaluationsStudentWhereUniqueInput!): EvaluationsStudent
  interviews(where: InterviewsWhereUniqueInput!): Interviews
  careersModel(where: CareersModelWhereUniqueInput!): CareersModel
  characteristics(where: CharacteristicsWhereUniqueInput!): Characteristics
  association(where: AssociationWhereUniqueInput!): Association
  countriesModel(where: CountriesModelWhereUniqueInput!): CountriesModel
  housesConnection(where: HouseWhereInput, orderBy: HouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HouseConnection!
  userStudentsConnection(where: UserStudentWhereInput, orderBy: UserStudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserStudentConnection!
  userGrandpasConnection(where: UserGrandpaWhereInput, orderBy: UserGrandpaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserGrandpaConnection!
  imagesUniversitiesConnection(where: imagesUniversityWhereInput, orderBy: imagesUniversityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): imagesUniversityConnection!
  imagesDocumentsConnection(where: imagesDocumentWhereInput, orderBy: imagesDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): imagesDocumentConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  evaluationsGrandpasConnection(where: EvaluationsGrandpaWhereInput, orderBy: EvaluationsGrandpaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EvaluationsGrandpaConnection!
  sourcesModelsConnection(where: SourcesModelWhereInput, orderBy: SourcesModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SourcesModelConnection!
  typeUsersConnection(where: TypeUserWhereInput, orderBy: TypeUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TypeUserConnection!
  provincesConnection(where: ProvinceWhereInput, orderBy: ProvinceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProvinceConnection!
  universitiesModelsConnection(where: UniversitiesModelWhereInput, orderBy: UniversitiesModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UniversitiesModelConnection!
  couplesConnection(where: CoupleWhereInput, orderBy: CoupleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CoupleConnection!
  userTechesConnection(where: UserTechWhereInput, orderBy: UserTechOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserTechConnection!
  evaluationsStudentsConnection(where: EvaluationsStudentWhereInput, orderBy: EvaluationsStudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EvaluationsStudentConnection!
  interviewsesConnection(where: InterviewsWhereInput, orderBy: InterviewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InterviewsConnection!
  careersModelsConnection(where: CareersModelWhereInput, orderBy: CareersModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CareersModelConnection!
  characteristicsesConnection(where: CharacteristicsWhereInput, orderBy: CharacteristicsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CharacteristicsConnection!
  associationsConnection(where: AssociationWhereInput, orderBy: AssociationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AssociationConnection!
  countriesModelsConnection(where: CountriesModelWhereInput, orderBy: CountriesModelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountriesModelConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type SourcesModel implements Node {
  id: ID!
  sourceName: String!
}

"""A connection to a list of items."""
type SourcesModelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SourcesModelEdge]!
  aggregate: AggregateSourcesModel!
}

input SourcesModelCreateInput {
  id: ID
  sourceName: String!
}

input SourcesModelCreateOneInput {
  create: SourcesModelCreateInput
  connect: SourcesModelWhereUniqueInput
}

"""An edge in a connection."""
type SourcesModelEdge {
  """The item at the end of the edge."""
  node: SourcesModel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SourcesModelOrderByInput {
  id_ASC
  id_DESC
  sourceName_ASC
  sourceName_DESC
}

type SourcesModelPreviousValues {
  id: ID!
  sourceName: String!
}

type SourcesModelSubscriptionPayload {
  mutation: MutationType!
  node: SourcesModel
  updatedFields: [String!]
  previousValues: SourcesModelPreviousValues
}

input SourcesModelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SourcesModelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SourcesModelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SourcesModelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SourcesModelWhereInput
}

input SourcesModelUpdateDataInput {
  sourceName: String
}

input SourcesModelUpdateInput {
  sourceName: String
}

input SourcesModelUpdateManyMutationInput {
  sourceName: String
}

input SourcesModelUpdateOneInput {
  create: SourcesModelCreateInput
  connect: SourcesModelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SourcesModelUpdateDataInput
  upsert: SourcesModelUpsertNestedInput
}

input SourcesModelUpsertNestedInput {
  update: SourcesModelUpdateDataInput!
  create: SourcesModelCreateInput!
}

input SourcesModelWhereInput {
  """Logical AND on all given filters."""
  AND: [SourcesModelWhereInput!]

  """Logical OR on all given filters."""
  OR: [SourcesModelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SourcesModelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sourceName: String

  """All values that are not equal to given value."""
  sourceName_not: String

  """All values that are contained in given list."""
  sourceName_in: [String!]

  """All values that are not contained in given list."""
  sourceName_not_in: [String!]

  """All values less than the given value."""
  sourceName_lt: String

  """All values less than or equal the given value."""
  sourceName_lte: String

  """All values greater than the given value."""
  sourceName_gt: String

  """All values greater than or equal the given value."""
  sourceName_gte: String

  """All values containing the given string."""
  sourceName_contains: String

  """All values not containing the given string."""
  sourceName_not_contains: String

  """All values starting with the given string."""
  sourceName_starts_with: String

  """All values not starting with the given string."""
  sourceName_not_starts_with: String

  """All values ending with the given string."""
  sourceName_ends_with: String

  """All values not ending with the given string."""
  sourceName_not_ends_with: String
}

input SourcesModelWhereUniqueInput {
  id: ID
}

enum StateProcess {
  ACTIVE
  INACTIVE
  SELECTED
  CUPLE
}

type Subscription {
  house(where: HouseSubscriptionWhereInput): HouseSubscriptionPayload
  userStudent(where: UserStudentSubscriptionWhereInput): UserStudentSubscriptionPayload
  userGrandpa(where: UserGrandpaSubscriptionWhereInput): UserGrandpaSubscriptionPayload
  imagesUniversity(where: imagesUniversitySubscriptionWhereInput): imagesUniversitySubscriptionPayload
  imagesDocument(where: imagesDocumentSubscriptionWhereInput): imagesDocumentSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  evaluationsGrandpa(where: EvaluationsGrandpaSubscriptionWhereInput): EvaluationsGrandpaSubscriptionPayload
  sourcesModel(where: SourcesModelSubscriptionWhereInput): SourcesModelSubscriptionPayload
  typeUser(where: TypeUserSubscriptionWhereInput): TypeUserSubscriptionPayload
  province(where: ProvinceSubscriptionWhereInput): ProvinceSubscriptionPayload
  universitiesModel(where: UniversitiesModelSubscriptionWhereInput): UniversitiesModelSubscriptionPayload
  couple(where: CoupleSubscriptionWhereInput): CoupleSubscriptionPayload
  userTech(where: UserTechSubscriptionWhereInput): UserTechSubscriptionPayload
  evaluationsStudent(where: EvaluationsStudentSubscriptionWhereInput): EvaluationsStudentSubscriptionPayload
  interviews(where: InterviewsSubscriptionWhereInput): InterviewsSubscriptionPayload
  careersModel(where: CareersModelSubscriptionWhereInput): CareersModelSubscriptionPayload
  characteristics(where: CharacteristicsSubscriptionWhereInput): CharacteristicsSubscriptionPayload
  association(where: AssociationSubscriptionWhereInput): AssociationSubscriptionPayload
  countriesModel(where: CountriesModelSubscriptionWhereInput): CountriesModelSubscriptionPayload
}

enum Title {
  PSICOLOGO
  TARBAJADOR_SOCIAL
  ADMINISTRATIVO
  GESTOR
  OTROS
}

enum TypeDocument {
  DNI
  NIE
}

type TypeUser implements Node {
  id: ID!
  typeName: String!
}

"""A connection to a list of items."""
type TypeUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TypeUserEdge]!
  aggregate: AggregateTypeUser!
}

input TypeUserCreateInput {
  id: ID
  typeName: String!
}

input TypeUserCreateOneInput {
  create: TypeUserCreateInput
  connect: TypeUserWhereUniqueInput
}

"""An edge in a connection."""
type TypeUserEdge {
  """The item at the end of the edge."""
  node: TypeUser!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TypeUserOrderByInput {
  id_ASC
  id_DESC
  typeName_ASC
  typeName_DESC
}

type TypeUserPreviousValues {
  id: ID!
  typeName: String!
}

type TypeUserSubscriptionPayload {
  mutation: MutationType!
  node: TypeUser
  updatedFields: [String!]
  previousValues: TypeUserPreviousValues
}

input TypeUserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TypeUserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TypeUserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TypeUserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TypeUserWhereInput
}

input TypeUserUpdateDataInput {
  typeName: String
}

input TypeUserUpdateInput {
  typeName: String
}

input TypeUserUpdateManyMutationInput {
  typeName: String
}

input TypeUserUpdateOneInput {
  create: TypeUserCreateInput
  connect: TypeUserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TypeUserUpdateDataInput
  upsert: TypeUserUpsertNestedInput
}

input TypeUserUpsertNestedInput {
  update: TypeUserUpdateDataInput!
  create: TypeUserCreateInput!
}

input TypeUserWhereInput {
  """Logical AND on all given filters."""
  AND: [TypeUserWhereInput!]

  """Logical OR on all given filters."""
  OR: [TypeUserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TypeUserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  typeName: String

  """All values that are not equal to given value."""
  typeName_not: String

  """All values that are contained in given list."""
  typeName_in: [String!]

  """All values that are not contained in given list."""
  typeName_not_in: [String!]

  """All values less than the given value."""
  typeName_lt: String

  """All values less than or equal the given value."""
  typeName_lte: String

  """All values greater than the given value."""
  typeName_gt: String

  """All values greater than or equal the given value."""
  typeName_gte: String

  """All values containing the given string."""
  typeName_contains: String

  """All values not containing the given string."""
  typeName_not_contains: String

  """All values starting with the given string."""
  typeName_starts_with: String

  """All values not starting with the given string."""
  typeName_not_starts_with: String

  """All values ending with the given string."""
  typeName_ends_with: String

  """All values not ending with the given string."""
  typeName_not_ends_with: String
}

input TypeUserWhereUniqueInput {
  id: ID
  typeName: String
}

type UniversitiesModel implements Node {
  id: ID!
  universityName: String!
  province: Province
}

"""A connection to a list of items."""
type UniversitiesModelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UniversitiesModelEdge]!
  aggregate: AggregateUniversitiesModel!
}

input UniversitiesModelCreateInput {
  id: ID
  universityName: String!
  province: ProvinceCreateOneInput
}

input UniversitiesModelCreateOneInput {
  create: UniversitiesModelCreateInput
  connect: UniversitiesModelWhereUniqueInput
}

"""An edge in a connection."""
type UniversitiesModelEdge {
  """The item at the end of the edge."""
  node: UniversitiesModel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UniversitiesModelOrderByInput {
  id_ASC
  id_DESC
  universityName_ASC
  universityName_DESC
}

type UniversitiesModelPreviousValues {
  id: ID!
  universityName: String!
}

type UniversitiesModelSubscriptionPayload {
  mutation: MutationType!
  node: UniversitiesModel
  updatedFields: [String!]
  previousValues: UniversitiesModelPreviousValues
}

input UniversitiesModelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UniversitiesModelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UniversitiesModelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UniversitiesModelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UniversitiesModelWhereInput
}

input UniversitiesModelUpdateDataInput {
  universityName: String
  province: ProvinceUpdateOneInput
}

input UniversitiesModelUpdateInput {
  universityName: String
  province: ProvinceUpdateOneInput
}

input UniversitiesModelUpdateManyMutationInput {
  universityName: String
}

input UniversitiesModelUpdateOneInput {
  create: UniversitiesModelCreateInput
  connect: UniversitiesModelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UniversitiesModelUpdateDataInput
  upsert: UniversitiesModelUpsertNestedInput
}

input UniversitiesModelUpdateOneRequiredInput {
  create: UniversitiesModelCreateInput
  connect: UniversitiesModelWhereUniqueInput
  update: UniversitiesModelUpdateDataInput
  upsert: UniversitiesModelUpsertNestedInput
}

input UniversitiesModelUpsertNestedInput {
  update: UniversitiesModelUpdateDataInput!
  create: UniversitiesModelCreateInput!
}

input UniversitiesModelWhereInput {
  """Logical AND on all given filters."""
  AND: [UniversitiesModelWhereInput!]

  """Logical OR on all given filters."""
  OR: [UniversitiesModelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UniversitiesModelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  universityName: String

  """All values that are not equal to given value."""
  universityName_not: String

  """All values that are contained in given list."""
  universityName_in: [String!]

  """All values that are not contained in given list."""
  universityName_not_in: [String!]

  """All values less than the given value."""
  universityName_lt: String

  """All values less than or equal the given value."""
  universityName_lte: String

  """All values greater than the given value."""
  universityName_gt: String

  """All values greater than or equal the given value."""
  universityName_gte: String

  """All values containing the given string."""
  universityName_contains: String

  """All values not containing the given string."""
  universityName_not_contains: String

  """All values starting with the given string."""
  universityName_starts_with: String

  """All values not starting with the given string."""
  universityName_not_starts_with: String

  """All values ending with the given string."""
  universityName_ends_with: String

  """All values not ending with the given string."""
  universityName_not_ends_with: String
  province: ProvinceWhereInput
}

input UniversitiesModelWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  name: String!
  lastname: String!
  phone: String!
  email: String!
  password: String!
  typeUser: TypeUser
  createDate: DateTime
  updateDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permissions!]!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  lastname: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  typeUser: TypeUserCreateOneInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permissions!]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

type UserGrandpa implements Node {
  id: ID!
  userId: User!
  association: Association!
  evaluation(where: EvaluationsGrandpaWhereInput, orderBy: EvaluationsGrandpaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EvaluationsGrandpa!]
  interview(where: InterviewsWhereInput, orderBy: InterviewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interviews!]
  gender: [Gender!]!
  birthData: DateTime
  originCountry: CountriesModel
  techResponsible: UserTech
  typeDocument: [TypeDocument!]!
  numberDocument: String
  imageProfile: String
  coupleID: Couple
  createDate: DateTime
  updateDate: DateTime
  adress: String
}

"""A connection to a list of items."""
type UserGrandpaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserGrandpaEdge]!
  aggregate: AggregateUserGrandpa!
}

input UserGrandpaCreategenderInput {
  set: [Gender!]
}

input UserGrandpaCreateInput {
  id: ID
  birthData: DateTime
  numberDocument: String
  imageProfile: String
  adress: String
  gender: UserGrandpaCreategenderInput
  typeDocument: UserGrandpaCreatetypeDocumentInput
  userId: UserCreateOneInput!
  association: AssociationCreateOneInput!
  evaluation: EvaluationsGrandpaCreateManyInput
  interview: InterviewsCreateManyInput
  originCountry: CountriesModelCreateOneInput
  techResponsible: UserTechCreateOneInput
  coupleID: CoupleCreateOneInput
}

input UserGrandpaCreatetypeDocumentInput {
  set: [TypeDocument!]
}

"""An edge in a connection."""
type UserGrandpaEdge {
  """The item at the end of the edge."""
  node: UserGrandpa!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserGrandpaOrderByInput {
  id_ASC
  id_DESC
  birthData_ASC
  birthData_DESC
  numberDocument_ASC
  numberDocument_DESC
  imageProfile_ASC
  imageProfile_DESC
  createDate_ASC
  createDate_DESC
  updateDate_ASC
  updateDate_DESC
  adress_ASC
  adress_DESC
}

type UserGrandpaPreviousValues {
  id: ID!
  gender: [Gender!]!
  birthData: DateTime
  typeDocument: [TypeDocument!]!
  numberDocument: String
  imageProfile: String
  createDate: DateTime
  updateDate: DateTime
  adress: String
}

type UserGrandpaSubscriptionPayload {
  mutation: MutationType!
  node: UserGrandpa
  updatedFields: [String!]
  previousValues: UserGrandpaPreviousValues
}

input UserGrandpaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserGrandpaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserGrandpaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserGrandpaSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserGrandpaWhereInput
}

input UserGrandpaUpdategenderInput {
  set: [Gender!]
}

input UserGrandpaUpdateInput {
  birthData: DateTime
  numberDocument: String
  imageProfile: String
  adress: String
  gender: UserGrandpaUpdategenderInput
  typeDocument: UserGrandpaUpdatetypeDocumentInput
  userId: UserUpdateOneRequiredInput
  association: AssociationUpdateOneRequiredInput
  evaluation: EvaluationsGrandpaUpdateManyInput
  interview: InterviewsUpdateManyInput
  originCountry: CountriesModelUpdateOneInput
  techResponsible: UserTechUpdateOneInput
  coupleID: CoupleUpdateOneInput
}

input UserGrandpaUpdateManyMutationInput {
  birthData: DateTime
  numberDocument: String
  imageProfile: String
  adress: String
  gender: UserGrandpaUpdategenderInput
  typeDocument: UserGrandpaUpdatetypeDocumentInput
}

input UserGrandpaUpdatetypeDocumentInput {
  set: [TypeDocument!]
}

input UserGrandpaWhereInput {
  """Logical AND on all given filters."""
  AND: [UserGrandpaWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserGrandpaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserGrandpaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  birthData: DateTime

  """All values that are not equal to given value."""
  birthData_not: DateTime

  """All values that are contained in given list."""
  birthData_in: [DateTime!]

  """All values that are not contained in given list."""
  birthData_not_in: [DateTime!]

  """All values less than the given value."""
  birthData_lt: DateTime

  """All values less than or equal the given value."""
  birthData_lte: DateTime

  """All values greater than the given value."""
  birthData_gt: DateTime

  """All values greater than or equal the given value."""
  birthData_gte: DateTime
  numberDocument: String

  """All values that are not equal to given value."""
  numberDocument_not: String

  """All values that are contained in given list."""
  numberDocument_in: [String!]

  """All values that are not contained in given list."""
  numberDocument_not_in: [String!]

  """All values less than the given value."""
  numberDocument_lt: String

  """All values less than or equal the given value."""
  numberDocument_lte: String

  """All values greater than the given value."""
  numberDocument_gt: String

  """All values greater than or equal the given value."""
  numberDocument_gte: String

  """All values containing the given string."""
  numberDocument_contains: String

  """All values not containing the given string."""
  numberDocument_not_contains: String

  """All values starting with the given string."""
  numberDocument_starts_with: String

  """All values not starting with the given string."""
  numberDocument_not_starts_with: String

  """All values ending with the given string."""
  numberDocument_ends_with: String

  """All values not ending with the given string."""
  numberDocument_not_ends_with: String
  imageProfile: String

  """All values that are not equal to given value."""
  imageProfile_not: String

  """All values that are contained in given list."""
  imageProfile_in: [String!]

  """All values that are not contained in given list."""
  imageProfile_not_in: [String!]

  """All values less than the given value."""
  imageProfile_lt: String

  """All values less than or equal the given value."""
  imageProfile_lte: String

  """All values greater than the given value."""
  imageProfile_gt: String

  """All values greater than or equal the given value."""
  imageProfile_gte: String

  """All values containing the given string."""
  imageProfile_contains: String

  """All values not containing the given string."""
  imageProfile_not_contains: String

  """All values starting with the given string."""
  imageProfile_starts_with: String

  """All values not starting with the given string."""
  imageProfile_not_starts_with: String

  """All values ending with the given string."""
  imageProfile_ends_with: String

  """All values not ending with the given string."""
  imageProfile_not_ends_with: String
  createDate: DateTime

  """All values that are not equal to given value."""
  createDate_not: DateTime

  """All values that are contained in given list."""
  createDate_in: [DateTime!]

  """All values that are not contained in given list."""
  createDate_not_in: [DateTime!]

  """All values less than the given value."""
  createDate_lt: DateTime

  """All values less than or equal the given value."""
  createDate_lte: DateTime

  """All values greater than the given value."""
  createDate_gt: DateTime

  """All values greater than or equal the given value."""
  createDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  adress: String

  """All values that are not equal to given value."""
  adress_not: String

  """All values that are contained in given list."""
  adress_in: [String!]

  """All values that are not contained in given list."""
  adress_not_in: [String!]

  """All values less than the given value."""
  adress_lt: String

  """All values less than or equal the given value."""
  adress_lte: String

  """All values greater than the given value."""
  adress_gt: String

  """All values greater than or equal the given value."""
  adress_gte: String

  """All values containing the given string."""
  adress_contains: String

  """All values not containing the given string."""
  adress_not_contains: String

  """All values starting with the given string."""
  adress_starts_with: String

  """All values not starting with the given string."""
  adress_not_starts_with: String

  """All values ending with the given string."""
  adress_ends_with: String

  """All values not ending with the given string."""
  adress_not_ends_with: String
  userId: UserWhereInput
  association: AssociationWhereInput
  evaluation_every: EvaluationsGrandpaWhereInput
  evaluation_some: EvaluationsGrandpaWhereInput
  evaluation_none: EvaluationsGrandpaWhereInput
  interview_every: InterviewsWhereInput
  interview_some: InterviewsWhereInput
  interview_none: InterviewsWhereInput
  originCountry: CountriesModelWhereInput
  techResponsible: UserTechWhereInput
  coupleID: CoupleWhereInput
}

input UserGrandpaWhereUniqueInput {
  id: ID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  lastname_ASC
  lastname_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createDate_ASC
  createDate_DESC
  updateDate_ASC
  updateDate_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  lastname: String!
  phone: String!
  email: String!
  password: String!
  createDate: DateTime
  updateDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permissions!]!
}

type UserStudent implements Node {
  id: ID!
  userId: User!
  association: Association!
  typeDocument: [TypeDocument!]!
  numberDocument: String
  techResponsible: UserTech
  studing: String
  career: CareersModel
  university: UniversitiesModel
  classSchedule: String
  sourceExternal: SourcesModel
  gender: [Gender!]!
  birthData: DateTime
  originCountry: CountriesModel
  weekendFree: String
  evaluarion(where: EvaluationsStudentWhereInput, orderBy: EvaluationsStudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EvaluationsStudent!]
  interview(where: InterviewsWhereInput, orderBy: InterviewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interviews!]
  state: [StateProcess!]!
  adress: String
  createDate: DateTime
  updateDate: DateTime
  imageDocument(where: imagesDocumentWhereInput, orderBy: imagesDocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [imagesDocument!]
  imageProfile: String
  imageUniversity(where: imagesUniversityWhereInput, orderBy: imagesUniversityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [imagesUniversity!]
  coupleID: Couple
}

"""A connection to a list of items."""
type UserStudentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserStudentEdge]!
  aggregate: AggregateUserStudent!
}

input UserStudentCreategenderInput {
  set: [Gender!]
}

input UserStudentCreateInput {
  id: ID
  numberDocument: String
  studing: String
  classSchedule: String
  birthData: DateTime
  weekendFree: String
  adress: String
  imageProfile: String
  typeDocument: UserStudentCreatetypeDocumentInput
  gender: UserStudentCreategenderInput
  state: UserStudentCreatestateInput
  userId: UserCreateOneInput!
  association: AssociationCreateOneInput!
  techResponsible: UserTechCreateOneInput
  career: CareersModelCreateOneInput
  university: UniversitiesModelCreateOneInput
  sourceExternal: SourcesModelCreateOneInput
  originCountry: CountriesModelCreateOneInput
  evaluarion: EvaluationsStudentCreateManyInput
  interview: InterviewsCreateManyInput
  imageDocument: imagesDocumentCreateManyInput
  imageUniversity: imagesUniversityCreateManyInput
  coupleID: CoupleCreateOneInput
}

input UserStudentCreatestateInput {
  set: [StateProcess!]
}

input UserStudentCreatetypeDocumentInput {
  set: [TypeDocument!]
}

"""An edge in a connection."""
type UserStudentEdge {
  """The item at the end of the edge."""
  node: UserStudent!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserStudentOrderByInput {
  id_ASC
  id_DESC
  numberDocument_ASC
  numberDocument_DESC
  studing_ASC
  studing_DESC
  classSchedule_ASC
  classSchedule_DESC
  birthData_ASC
  birthData_DESC
  weekendFree_ASC
  weekendFree_DESC
  adress_ASC
  adress_DESC
  createDate_ASC
  createDate_DESC
  updateDate_ASC
  updateDate_DESC
  imageProfile_ASC
  imageProfile_DESC
}

type UserStudentPreviousValues {
  id: ID!
  typeDocument: [TypeDocument!]!
  numberDocument: String
  studing: String
  classSchedule: String
  gender: [Gender!]!
  birthData: DateTime
  weekendFree: String
  state: [StateProcess!]!
  adress: String
  createDate: DateTime
  updateDate: DateTime
  imageProfile: String
}

type UserStudentSubscriptionPayload {
  mutation: MutationType!
  node: UserStudent
  updatedFields: [String!]
  previousValues: UserStudentPreviousValues
}

input UserStudentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserStudentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserStudentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserStudentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserStudentWhereInput
}

input UserStudentUpdategenderInput {
  set: [Gender!]
}

input UserStudentUpdateInput {
  numberDocument: String
  studing: String
  classSchedule: String
  birthData: DateTime
  weekendFree: String
  adress: String
  imageProfile: String
  typeDocument: UserStudentUpdatetypeDocumentInput
  gender: UserStudentUpdategenderInput
  state: UserStudentUpdatestateInput
  userId: UserUpdateOneRequiredInput
  association: AssociationUpdateOneRequiredInput
  techResponsible: UserTechUpdateOneInput
  career: CareersModelUpdateOneInput
  university: UniversitiesModelUpdateOneInput
  sourceExternal: SourcesModelUpdateOneInput
  originCountry: CountriesModelUpdateOneInput
  evaluarion: EvaluationsStudentUpdateManyInput
  interview: InterviewsUpdateManyInput
  imageDocument: imagesDocumentUpdateManyInput
  imageUniversity: imagesUniversityUpdateManyInput
  coupleID: CoupleUpdateOneInput
}

input UserStudentUpdateManyMutationInput {
  numberDocument: String
  studing: String
  classSchedule: String
  birthData: DateTime
  weekendFree: String
  adress: String
  imageProfile: String
  typeDocument: UserStudentUpdatetypeDocumentInput
  gender: UserStudentUpdategenderInput
  state: UserStudentUpdatestateInput
}

input UserStudentUpdatestateInput {
  set: [StateProcess!]
}

input UserStudentUpdatetypeDocumentInput {
  set: [TypeDocument!]
}

input UserStudentWhereInput {
  """Logical AND on all given filters."""
  AND: [UserStudentWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserStudentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserStudentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  numberDocument: String

  """All values that are not equal to given value."""
  numberDocument_not: String

  """All values that are contained in given list."""
  numberDocument_in: [String!]

  """All values that are not contained in given list."""
  numberDocument_not_in: [String!]

  """All values less than the given value."""
  numberDocument_lt: String

  """All values less than or equal the given value."""
  numberDocument_lte: String

  """All values greater than the given value."""
  numberDocument_gt: String

  """All values greater than or equal the given value."""
  numberDocument_gte: String

  """All values containing the given string."""
  numberDocument_contains: String

  """All values not containing the given string."""
  numberDocument_not_contains: String

  """All values starting with the given string."""
  numberDocument_starts_with: String

  """All values not starting with the given string."""
  numberDocument_not_starts_with: String

  """All values ending with the given string."""
  numberDocument_ends_with: String

  """All values not ending with the given string."""
  numberDocument_not_ends_with: String
  studing: String

  """All values that are not equal to given value."""
  studing_not: String

  """All values that are contained in given list."""
  studing_in: [String!]

  """All values that are not contained in given list."""
  studing_not_in: [String!]

  """All values less than the given value."""
  studing_lt: String

  """All values less than or equal the given value."""
  studing_lte: String

  """All values greater than the given value."""
  studing_gt: String

  """All values greater than or equal the given value."""
  studing_gte: String

  """All values containing the given string."""
  studing_contains: String

  """All values not containing the given string."""
  studing_not_contains: String

  """All values starting with the given string."""
  studing_starts_with: String

  """All values not starting with the given string."""
  studing_not_starts_with: String

  """All values ending with the given string."""
  studing_ends_with: String

  """All values not ending with the given string."""
  studing_not_ends_with: String
  classSchedule: String

  """All values that are not equal to given value."""
  classSchedule_not: String

  """All values that are contained in given list."""
  classSchedule_in: [String!]

  """All values that are not contained in given list."""
  classSchedule_not_in: [String!]

  """All values less than the given value."""
  classSchedule_lt: String

  """All values less than or equal the given value."""
  classSchedule_lte: String

  """All values greater than the given value."""
  classSchedule_gt: String

  """All values greater than or equal the given value."""
  classSchedule_gte: String

  """All values containing the given string."""
  classSchedule_contains: String

  """All values not containing the given string."""
  classSchedule_not_contains: String

  """All values starting with the given string."""
  classSchedule_starts_with: String

  """All values not starting with the given string."""
  classSchedule_not_starts_with: String

  """All values ending with the given string."""
  classSchedule_ends_with: String

  """All values not ending with the given string."""
  classSchedule_not_ends_with: String
  birthData: DateTime

  """All values that are not equal to given value."""
  birthData_not: DateTime

  """All values that are contained in given list."""
  birthData_in: [DateTime!]

  """All values that are not contained in given list."""
  birthData_not_in: [DateTime!]

  """All values less than the given value."""
  birthData_lt: DateTime

  """All values less than or equal the given value."""
  birthData_lte: DateTime

  """All values greater than the given value."""
  birthData_gt: DateTime

  """All values greater than or equal the given value."""
  birthData_gte: DateTime
  weekendFree: String

  """All values that are not equal to given value."""
  weekendFree_not: String

  """All values that are contained in given list."""
  weekendFree_in: [String!]

  """All values that are not contained in given list."""
  weekendFree_not_in: [String!]

  """All values less than the given value."""
  weekendFree_lt: String

  """All values less than or equal the given value."""
  weekendFree_lte: String

  """All values greater than the given value."""
  weekendFree_gt: String

  """All values greater than or equal the given value."""
  weekendFree_gte: String

  """All values containing the given string."""
  weekendFree_contains: String

  """All values not containing the given string."""
  weekendFree_not_contains: String

  """All values starting with the given string."""
  weekendFree_starts_with: String

  """All values not starting with the given string."""
  weekendFree_not_starts_with: String

  """All values ending with the given string."""
  weekendFree_ends_with: String

  """All values not ending with the given string."""
  weekendFree_not_ends_with: String
  adress: String

  """All values that are not equal to given value."""
  adress_not: String

  """All values that are contained in given list."""
  adress_in: [String!]

  """All values that are not contained in given list."""
  adress_not_in: [String!]

  """All values less than the given value."""
  adress_lt: String

  """All values less than or equal the given value."""
  adress_lte: String

  """All values greater than the given value."""
  adress_gt: String

  """All values greater than or equal the given value."""
  adress_gte: String

  """All values containing the given string."""
  adress_contains: String

  """All values not containing the given string."""
  adress_not_contains: String

  """All values starting with the given string."""
  adress_starts_with: String

  """All values not starting with the given string."""
  adress_not_starts_with: String

  """All values ending with the given string."""
  adress_ends_with: String

  """All values not ending with the given string."""
  adress_not_ends_with: String
  createDate: DateTime

  """All values that are not equal to given value."""
  createDate_not: DateTime

  """All values that are contained in given list."""
  createDate_in: [DateTime!]

  """All values that are not contained in given list."""
  createDate_not_in: [DateTime!]

  """All values less than the given value."""
  createDate_lt: DateTime

  """All values less than or equal the given value."""
  createDate_lte: DateTime

  """All values greater than the given value."""
  createDate_gt: DateTime

  """All values greater than or equal the given value."""
  createDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  imageProfile: String

  """All values that are not equal to given value."""
  imageProfile_not: String

  """All values that are contained in given list."""
  imageProfile_in: [String!]

  """All values that are not contained in given list."""
  imageProfile_not_in: [String!]

  """All values less than the given value."""
  imageProfile_lt: String

  """All values less than or equal the given value."""
  imageProfile_lte: String

  """All values greater than the given value."""
  imageProfile_gt: String

  """All values greater than or equal the given value."""
  imageProfile_gte: String

  """All values containing the given string."""
  imageProfile_contains: String

  """All values not containing the given string."""
  imageProfile_not_contains: String

  """All values starting with the given string."""
  imageProfile_starts_with: String

  """All values not starting with the given string."""
  imageProfile_not_starts_with: String

  """All values ending with the given string."""
  imageProfile_ends_with: String

  """All values not ending with the given string."""
  imageProfile_not_ends_with: String
  userId: UserWhereInput
  association: AssociationWhereInput
  techResponsible: UserTechWhereInput
  career: CareersModelWhereInput
  university: UniversitiesModelWhereInput
  sourceExternal: SourcesModelWhereInput
  originCountry: CountriesModelWhereInput
  evaluarion_every: EvaluationsStudentWhereInput
  evaluarion_some: EvaluationsStudentWhereInput
  evaluarion_none: EvaluationsStudentWhereInput
  interview_every: InterviewsWhereInput
  interview_some: InterviewsWhereInput
  interview_none: InterviewsWhereInput
  imageDocument_every: imagesDocumentWhereInput
  imageDocument_some: imagesDocumentWhereInput
  imageDocument_none: imagesDocumentWhereInput
  imageUniversity_every: imagesUniversityWhereInput
  imageUniversity_some: imagesUniversityWhereInput
  imageUniversity_none: imagesUniversityWhereInput
  coupleID: CoupleWhereInput
}

input UserStudentWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

type UserTech implements Node {
  id: ID!
  userId: User!
  association: Association!
  title: [Title!]!
  titleOthers: String
  phoneOffice: String
  createDate: DateTime
  updateDate: DateTime
}

"""A connection to a list of items."""
type UserTechConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserTechEdge]!
  aggregate: AggregateUserTech!
}

input UserTechCreateInput {
  id: ID
  titleOthers: String
  phoneOffice: String
  title: UserTechCreatetitleInput
  userId: UserCreateOneInput!
  association: AssociationCreateOneInput!
}

input UserTechCreateOneInput {
  create: UserTechCreateInput
  connect: UserTechWhereUniqueInput
}

input UserTechCreatetitleInput {
  set: [Title!]
}

"""An edge in a connection."""
type UserTechEdge {
  """The item at the end of the edge."""
  node: UserTech!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserTechOrderByInput {
  id_ASC
  id_DESC
  titleOthers_ASC
  titleOthers_DESC
  phoneOffice_ASC
  phoneOffice_DESC
  createDate_ASC
  createDate_DESC
  updateDate_ASC
  updateDate_DESC
}

type UserTechPreviousValues {
  id: ID!
  title: [Title!]!
  titleOthers: String
  phoneOffice: String
  createDate: DateTime
  updateDate: DateTime
}

type UserTechSubscriptionPayload {
  mutation: MutationType!
  node: UserTech
  updatedFields: [String!]
  previousValues: UserTechPreviousValues
}

input UserTechSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserTechSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserTechSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserTechSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserTechWhereInput
}

input UserTechUpdateDataInput {
  titleOthers: String
  phoneOffice: String
  title: UserTechUpdatetitleInput
  userId: UserUpdateOneRequiredInput
  association: AssociationUpdateOneRequiredInput
}

input UserTechUpdateInput {
  titleOthers: String
  phoneOffice: String
  title: UserTechUpdatetitleInput
  userId: UserUpdateOneRequiredInput
  association: AssociationUpdateOneRequiredInput
}

input UserTechUpdateManyMutationInput {
  titleOthers: String
  phoneOffice: String
  title: UserTechUpdatetitleInput
}

input UserTechUpdateOneInput {
  create: UserTechCreateInput
  connect: UserTechWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserTechUpdateDataInput
  upsert: UserTechUpsertNestedInput
}

input UserTechUpdatetitleInput {
  set: [Title!]
}

input UserTechUpsertNestedInput {
  update: UserTechUpdateDataInput!
  create: UserTechCreateInput!
}

input UserTechWhereInput {
  """Logical AND on all given filters."""
  AND: [UserTechWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserTechWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserTechWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  titleOthers: String

  """All values that are not equal to given value."""
  titleOthers_not: String

  """All values that are contained in given list."""
  titleOthers_in: [String!]

  """All values that are not contained in given list."""
  titleOthers_not_in: [String!]

  """All values less than the given value."""
  titleOthers_lt: String

  """All values less than or equal the given value."""
  titleOthers_lte: String

  """All values greater than the given value."""
  titleOthers_gt: String

  """All values greater than or equal the given value."""
  titleOthers_gte: String

  """All values containing the given string."""
  titleOthers_contains: String

  """All values not containing the given string."""
  titleOthers_not_contains: String

  """All values starting with the given string."""
  titleOthers_starts_with: String

  """All values not starting with the given string."""
  titleOthers_not_starts_with: String

  """All values ending with the given string."""
  titleOthers_ends_with: String

  """All values not ending with the given string."""
  titleOthers_not_ends_with: String
  phoneOffice: String

  """All values that are not equal to given value."""
  phoneOffice_not: String

  """All values that are contained in given list."""
  phoneOffice_in: [String!]

  """All values that are not contained in given list."""
  phoneOffice_not_in: [String!]

  """All values less than the given value."""
  phoneOffice_lt: String

  """All values less than or equal the given value."""
  phoneOffice_lte: String

  """All values greater than the given value."""
  phoneOffice_gt: String

  """All values greater than or equal the given value."""
  phoneOffice_gte: String

  """All values containing the given string."""
  phoneOffice_contains: String

  """All values not containing the given string."""
  phoneOffice_not_contains: String

  """All values starting with the given string."""
  phoneOffice_starts_with: String

  """All values not starting with the given string."""
  phoneOffice_not_starts_with: String

  """All values ending with the given string."""
  phoneOffice_ends_with: String

  """All values not ending with the given string."""
  phoneOffice_not_ends_with: String
  createDate: DateTime

  """All values that are not equal to given value."""
  createDate_not: DateTime

  """All values that are contained in given list."""
  createDate_in: [DateTime!]

  """All values that are not contained in given list."""
  createDate_not_in: [DateTime!]

  """All values less than the given value."""
  createDate_lt: DateTime

  """All values less than or equal the given value."""
  createDate_lte: DateTime

  """All values greater than the given value."""
  createDate_gt: DateTime

  """All values greater than or equal the given value."""
  createDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  userId: UserWhereInput
  association: AssociationWhereInput
}

input UserTechWhereUniqueInput {
  id: ID
}

input UserUpdateDataInput {
  name: String
  lastname: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  typeUser: TypeUserUpdateOneInput
}

input UserUpdateInput {
  name: String
  lastname: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  typeUser: TypeUserUpdateOneInput
}

input UserUpdateManyMutationInput {
  name: String
  lastname: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdatepermissionsInput {
  set: [Permissions!]
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  lastname: String

  """All values that are not equal to given value."""
  lastname_not: String

  """All values that are contained in given list."""
  lastname_in: [String!]

  """All values that are not contained in given list."""
  lastname_not_in: [String!]

  """All values less than the given value."""
  lastname_lt: String

  """All values less than or equal the given value."""
  lastname_lte: String

  """All values greater than the given value."""
  lastname_gt: String

  """All values greater than or equal the given value."""
  lastname_gte: String

  """All values containing the given string."""
  lastname_contains: String

  """All values not containing the given string."""
  lastname_not_contains: String

  """All values starting with the given string."""
  lastname_starts_with: String

  """All values not starting with the given string."""
  lastname_not_starts_with: String

  """All values ending with the given string."""
  lastname_ends_with: String

  """All values not ending with the given string."""
  lastname_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createDate: DateTime

  """All values that are not equal to given value."""
  createDate_not: DateTime

  """All values that are contained in given list."""
  createDate_in: [DateTime!]

  """All values that are not contained in given list."""
  createDate_not_in: [DateTime!]

  """All values less than the given value."""
  createDate_lt: DateTime

  """All values less than or equal the given value."""
  createDate_lte: DateTime

  """All values greater than the given value."""
  createDate_gt: DateTime

  """All values greater than or equal the given value."""
  createDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  typeUser: TypeUserWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
