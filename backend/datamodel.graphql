# @format

enum Permissions {
  USER
  ADMIN
  TECH
  STUDENT
  ADMINASSOCIATION
  GRANDPA
}

enum Title {
  PSICOLOGO
  TARBAJADOR_SOCIAL
  ADMINISTRATIVO
  GESTOR
  OTROS
}

enum TypeDocument {
  DNI
  NIE
}

enum Gender {
  MALE
  FEMALE
  NO_GENDE
}

enum StateProcess {
  ACTIVE
  INACTIVE
  SELECTED
  CUPLE
}

type User {
  id: ID! @id
  name: String!
  lastname: String!
  phone: String!
  email: String! @unique
  password: String!
  typeUser: TypeUser @relation(link: INLINE)
  createDate: DateTime @createdAt
  updateDate: DateTime @updatedAt
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permissions] @scalarList(strategy: RELATION)
}

type UserStudent {
  id: ID! @id
  userId: User!
  typeDocument: TypeDocument
  numberDocument: String
  association: Association
  techResponsible: UserTech
  studing: String
  career: Career
  university: University
  classSchedule: String
  sourceExternal: Source!
  gender: Gender
  birthData: DateTime
  originCountry: Country
  weekendFree: String
  evaluation: [EvaluationsStudent]
  interview: [Interviews]
  state: StateProcess
  adress: String
  createDate: DateTime @createdAt
  updateDate: DateTime @updatedAt
  imageDocument: [ImagesDocument]
  imageProfile: String
  imageUniversity: [ImagesUniversity]
  coupleID: Couple @relation(link: INLINE)
  # permissions: [Permissions] @scalarList(strategy: RELATION)
}

type UserTech {
  id: ID! @id
  userId: User @unique
  association: Association!
  title: Title @default(value: PSICOLOGO)
  titleOthers: String
  phoneOffice: String
  createDate: DateTime @createdAt
  updateDate: DateTime @updatedAt
}

type UserGrandpa {
  id: ID! @id
  adress: String
  association: Association!
  birthData: DateTime
  contactPerson: String
  country: Country
  coupleID: Couple @relation(link: INLINE)
  evaluation: [EvaluationsGrandpa]
  house: House
  imageProfile: String
  interview: [Interviews]
  gender: Gender
  lastName: String!
  name: String!
  numberDocument: String
  phone: String
  province: Province
  secondLastName: String
  techResponsible: User
  typeDocument: TypeDocument
  createDate: DateTime @createdAt
  updateDate: DateTime @updatedAt
}

type House {
  id: ID! @id
  userId: User! @unique
  province: Province!
  city: String!
  adress: String!
  cp: String!
  coordinates: Float!
  characteristics: [Characteristics!]
  m2: Int!
  bathrooms: Int!
  createDate: DateTime @createdAt
  updateDate: DateTime @updatedAt
}

type Characteristics {
  id: ID! @id
  name: String!
}

type ImagesDocument {
  id: ID! @id
  photo: String!
  user: User
}

type ImagesUniversity {
  id: ID! @id
  photo: String!
  user: User
}

type TypeUser {
  id: ID! @id
  typeName: String! @unique
}

type Career {
  id: ID! @id
  carrerName: String!
  university: University!
}

type University {
  id: ID! @id
  universityName: String!
  province: Province
}

type Province {
  id: ID! @id
  name: String!
  country: Country
}

type Couple {
  id: ID! @id
  userIdStudent: User
  userIdGrandpa: UserGrandpa
}

type Source {
  id: ID! @id
  sourceName: String!
}

type Country {
  id: ID! @id
  countryName: String!
}

type Association {
  id: ID! @id
  name: String
  province: Province
  city: String
  adress: String
  cp: String
  coordinates: Float
  phone: String
  email: String
  description: String
  logo: String
  images: [String] @scalarList(strategy: RELATION)
  createDate: DateTime @createdAt
  updateDate: DateTime @updatedAt
}

type EvaluationsGrandpa {
  id: ID! @id
  name: String
}

type EvaluationsStudent {
  id: ID! @id
  name: String
}

type Interviews {
  id: ID! @id
  name: String
}
